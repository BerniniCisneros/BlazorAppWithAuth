@page "/"

<PageTitle>Territorios de la congregación La Venta del Astillero</PageTitle>

@using System.Globalization;
@using Territorios.Data
@using Models
@using System.Security.Claims
@inject TerritoryService TerritoryService
@inject MobileService MobileService
@inject IHttpContextAccessor httpContextAccessor

<h1>Territorios</h1>

<p>Seleccione un territorio.</p>

@if (territories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <select @onchange="(e) => ChangeTerritory(e)">
        @foreach (var territory in territories)
        {
            <option value="@territory.TerritoryId">@territory.Name</option>
        }
    </select>
}



@if (selectedTerritory != null)
{

    <p>Predicado por última vez: @(selectedTerritory.LasTimeWorked.HasValue ? selectedTerritory.LasTimeWorked.Value.ToString("D", culture) : "Sin fecha")</p>
    <div>
        <img src="Images/Territorio@(selectedTerritory.TerritoryId).jpg" />
    </div>
}

<p>Marque las cuadras que se han trabajado.</p>

@if (territories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (selectedTerritory != null)
    {
        if (selectedTerritory.Blocks.All(s => s.Worked))
        {
            <button @onclick="ClearAllBlocks">Borrar todas</button>
            <br />
        }
        <div style="display:flex; flex-flow: column wrap; max-height:200px">
        @foreach (var block in selectedTerritory.Blocks)
        {
            <div style="min-width:200px">
            <label>Cuadra </label>
            <label>@block.Id</label>
            <AuthorizeView>
                <Authorized>
                    @if(selectedTerritory.AssignedTo == @captains.Where(s => s.AspNetUserName == @context.User.Identity.Name).Single().Name)
                    {
                        <input type="checkbox" checked="@block.Worked" @onchange="(e) => CheckboxChanged(block, e)">
                    }
                    else
                    {
                        <input type="checkbox" checked="@block.Worked" @onchange="(e) => CheckboxChanged(block, e)" disabled>
                    }
                </Authorized>
                <NotAuthorized>
                    <input type="checkbox" checked="@block.Worked" @onchange="(e) => CheckboxChanged(block, e)" disabled>
                </NotAuthorized>
            </AuthorizeView>

            <label>@(block.WorkedOn.HasValue ? @block.WorkedOn.Value.ToString("m", culture) : "")</label>
            <br />
            </div>
        }
        </div>
        <AuthorizeView>
            <Authorized>
                <textarea style="width:100%" rows="20" placeholder="Escriba aquí cualquier nota sobre el territorio" @bind="selectedTerritory.Notes" @oninput="(e) => NotesChanged(e)">
                </textarea>
            </Authorized>
            <NotAuthorized>
                <textarea style="width:100%" rows="20" placeholder="Escriba aquí cualquier nota sobre el territorio" @bind="selectedTerritory.Notes" @oninput="(e) => NotesChanged(e)" disabled>
                </textarea>
            </NotAuthorized>
        </AuthorizeView>
        
    }
}


@code {
    Captain[] captains;
    private Territory[]? territories;
    private Territory? selectedTerritory;
    ClaimsPrincipal user;
    string selectedId;
    CultureInfo culture = new CultureInfo("es-MX");

    protected override async Task OnInitializedAsync()
    {
        territories = TerritoryService.GetTerritories();
        captains = TerritoryService.GetCaptains();
        user = httpContextAccessor.HttpContext.User;
        selectedTerritory = territories[0];
    }

    void ChangeTerritory(ChangeEventArgs e)
    {
        selectedId = e.Value.ToString();
        selectedTerritory = territories.Where(s => s.TerritoryId == int.Parse(selectedId)).Single();
    }

    void CheckboxChanged(Block currentBlock, ChangeEventArgs e)
    {
        var isChecked = (bool)e.Value;
        currentBlock.Worked = isChecked;
        if (isChecked)
        {
            currentBlock.WorkedOn = DateTime.Now;
            selectedTerritory.LasTimeWorked = DateTime.Now;
        }
        else
        {
            currentBlock.WorkedOn = null;
        }
        TerritoryService.MarkTerritory(selectedTerritory.TerritoryId, currentBlock.Id, currentBlock.Worked);
        territories = TerritoryService.GetTerritories();
    }

    void NotesChanged(ChangeEventArgs e)
    {
        TerritoryService.AddTerritoryNote(selectedTerritory.TerritoryId, e.Value.ToString());
    }

    void ClearAllBlocks(EventArgs e)
    {
        TerritoryService.MarkAllBlocks(selectedTerritory.TerritoryId, false);
        
        var overseer = captains.Where(s => s.Overseer).Single();
        TerritoryService.AssignTerritory(selectedTerritory.TerritoryId, overseer.Name);
        territories = TerritoryService.GetTerritories();
        selectedTerritory = territories.Where(s => s.TerritoryId == int.Parse(selectedId)).Single();
        MobileService.SendMessageAsync($"Hola! El territorio {selectedTerritory.Name} se ha finalizado", overseer.Mobile);
    }
}